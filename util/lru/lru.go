// Package lru provides a simple LRU cache. It is a small adaption of the
// LRU implementation of github.com/hashicorp/golang-lru/lru.go that adds the
// function GetOrCreate() to atomically get a cached value or create it if it
// does not yet exist in the cache.
package lru

import (
	"sync"

	"github.com/hashicorp/golang-lru/simplelru"

	"github.com/eluv-io/common-go/format/duration"
	"github.com/eluv-io/common-go/util/jsonutil"
	"github.com/eluv-io/common-go/util/stringutil"
	"github.com/eluv-io/common-go/util/syncutil"
	"github.com/eluv-io/common-go/util/traceutil"
	"github.com/eluv-io/errors-go"
)

type ConstructionMode string

// Modes defines the different construction modes that can be used with the LRU
// cache. The mode affects the synchronization in calls to the GetOrCreate(key)
// method.
//
// * Blocking: the write lock of the cache is held during the entire lookup and
// creation phase. This means that calls to the constructor are mutually
// exclusive and block all operations of the cache until completed.
//
// * Concurrent: the write lock of the cache is released before the constructor
// is called. It is therefore possible that the constructor for the same key is
// called concurrently. This mode provides maximum concurrency.
//
// * Decoupled: the write lock of the cache is released before the constructor
// is called. However, concurrent calls to the constructor with the same key are
// prevented by acquiring key-specific locks. This mode provides concurrency
// among different keys, but prevents it for a given key.
var Modes = struct {
	Blocking   ConstructionMode
	Concurrent ConstructionMode
	Decoupled  ConstructionMode
}{
	Blocking:   "blocking",
	Concurrent: "concurrent",
	Decoupled:  "decoupled",
}

type Cache = TypedCache[any, any]

// TypedCache is a thread-safe fixed size LRU cache.
type TypedCache[K any, V any] struct {
	lru          *simplelru.LRU
	lock         sync.RWMutex
	Mode         ConstructionMode // defaults to Blocking...
	namedLocks   syncutil.NamedLocks
	metrics      Metrics
	evictHandler func(key K, value V) // the external evict handler function
}

// Nil creates a cache that doesn't cache anything at all.
func Nil() *Cache {
	return nil
}

// TypedNil creates a typed cache that doesn't cache anything at all.
func TypedNil[K any, V any]() *TypedCache[K, V] {
	return nil
}

// New creates an LRU cache of the given size. The size is set to 1 if <= 0
func New(size int) *Cache {
	return NewTyped[any, any](size)
}

// NewTyped creates a typed LRU cache of the given size. The size is set to 1 if <= 0
func NewTyped[K any, V any](size int) *TypedCache[K, V] {
	return NewTypedWithEvict[K, V](size, nil)
}

// NewWithEvict constructs a fixed size cache with the given eviction callback.
func NewWithEvict(size int, onEvicted func(key any, value any)) *Cache {
	return NewTypedWithEvict(size, onEvicted)
}

// NewTypedWithEvict constructs a typed, fixed size cache with the given eviction callback.
func NewTypedWithEvict[K any, V any](size int, onEvicted func(key K, value V)) *TypedCache[K, V] {
	if size <= 0 {
		return TypedNil[K, V]()
	}
	c := &TypedCache[K, V]{
		evictHandler: onEvicted,
		metrics:      MakeMetrics(),
	}
	c.lru, _ = simplelru.NewLRU(size, c.onEvict)
	c.metrics.Config.MaxItems = size
	c.WithMode(Modes.Blocking)
	return c
}

// WithMode sets the cache's construction mode and returns itself for call
// chaining.
func (c *TypedCache[K, V]) WithMode(mode ConstructionMode) *TypedCache[K, V] {
	if c == nil {
		return nil
	}
	c.Mode = mode
	c.metrics.Config.Mode = string(mode)
	return c
}

// WithName sets the cache's name and returns itself for call chaining.
func (c *TypedCache[K, V]) WithName(name string) *TypedCache[K, V] {
	if c == nil {
		return nil
	}
	c.metrics.Name = name
	return c
}

// WithMaxAge sets the cache's maxAge (only for collection in metrics) and
// returns itself for call chaining.
func (c *TypedCache[K, V]) WithMaxAge(age duration.Spec) *TypedCache[K, V] {
	if c == nil {
		return nil
	}
	c.metrics.Config.MaxAge = age
	return c
}

// WithEvictHandler sets the given evict handler.
func (c *TypedCache[K, V]) WithEvictHandler(onEvicted func(key K, value V)) *TypedCache[K, V] {
	if c == nil {
		return nil
	}
	c.evictHandler = onEvicted
	return c
}

// Purge is used to completely clear the cache
func (c *TypedCache[K, V]) Purge() {
	if c == nil {
		return
	}
	c.lock.Lock()
	defer c.lock.Unlock()
	c.lru.Purge()
}

// Add adds a value to the cache or updates an existing entry. Works exactly like Update(), but only returns whether an
// an eviction occurred.
func (c *TypedCache[K, V]) Add(key K, value V) bool {
	_, evicted := c.Update(key, value)
	return evicted
}

// Update updates the existing value for the given key or adds it to the cache if it doesn't exist.
//
// The updated value is generated by calling the provided update function: if the key already exists, value will be
// non-nil, otherwise nil. The update function returns the non-nil updated value.
//
// Update returns two booleans:
//   - new: true if the key is new, false if it already existed and the entry was updated
//   - evicted: true if an eviction occurred.
func (c *TypedCache[K, V]) Update(key K, value V) (new bool, evicted bool) {
	return c.UpdateFn(key, func(_ V) V {
		return value
	})
}

// UpdateFn updates the existing value for the given key or adds it to the cache if it doesn't exist.
//
// The updated value is generated by calling the provided update function with the existing value stored for the given
// key or nil if no value is associated with the key. The update function returns a non-nil updated value.
//
// Update returns two booleans:
//   - new: true if the key is new, false if it already existed and the entry was updated
//   - evicted: true if an eviction occurred.
func (c *TypedCache[K, V]) UpdateFn(key K, update func(value V) V) (new bool, evicted bool) {
	if c == nil {
		return true, false
	}

	c.lock.Lock()
	defer c.lock.Unlock()

	c.metrics.Add()
	val, found := c.peek(key)
	if found {
		// updating existing key is basically a remove and an add. Since simple
		// lru doesn't count this as an eviction (and does not call the evict
		// callback), we have to update the metrics here...
		c.metrics.Remove()
		val = update(val)
	} else {
		new = true
		var zero V
		val = update(zero)
	}

	evicted = c.lru.Add(key, val)
	return new, evicted
}

// Get looks up a key's value from the cache.
func (c *TypedCache[K, V]) Get(key K) (V, bool) {
	var zero V
	if c == nil {
		return zero, false
	}
	// need the write lock, since this updates the recently-used list in
	// simple.LRU!
	c.lock.Lock()
	defer c.lock.Unlock()

	res, found := c.get(key)
	if found {
		c.metrics.Hit()
	} else {
		c.metrics.Miss()
	}
	return res, found
}

func (c *TypedCache[K, V]) get(key K) (V, bool) {
	res, found := c.lru.Get(key)
	if found && res != nil {
		return res.(V), true
	}
	var zero V
	return zero, false
}

// GetOrCreate looks up a key's value from the cache, creating it if necessary.
// Invalid, stale or expired entries are discarded from the cache as dictated
// by the first optional evict parameter.
//   - If the key does not exist, the given constructor function is called to
//     create a new value, store it at the key and return it. If the constructor
//     fails, no value is added to the cache and the error is returned. Otherwise,
//     the new value is added to the cache, and a boolean to mark any evictions
//     from the cache is returned as defined in the Add() method.
//   - If the key exists and the evict parameter is not nil, then the first evict
//     function is invoked with the retrieved value. If it returns true, the
//     value is discarded from the cache and the constructor is called.
func (c *TypedCache[K, V]) GetOrCreate(
	key K,
	constructor func() (V, error),
	evict ...func(val V) bool) (val V, evicted bool, err error) {

	span := traceutil.StartSpan("lru.Cache.GetOrCreate")
	defer span.End()
	if span.IsRecording() {
		orgConstructor := constructor
		constructor = func() (V, error) {
			span := traceutil.StartSpan("constructor")
			defer span.End()
			return orgConstructor()
		}
		if c != nil {
			span.Attribute("cache", c.metrics.Name)
			span.Attribute("key", stringutil.ToString(key))
		}
	}

	if c == nil {
		val, err = constructor()
		return val, false, err
	}

	var evictFn func(val V) bool
	if len(evict) > 0 {
		evictFn = evict[0]
	}

	switch c.Mode {
	case Modes.Blocking:
		return c.getOrCreateBlocking(key, constructor, evictFn)
	case Modes.Decoupled:
		return c.getOrCreateDecoupled(key, constructor, evictFn)
	case Modes.Concurrent:
		return c.getOrCreateConcurrent(key, constructor, evictFn)
	}

	// should never get here!
	var zero V
	return zero, false, errors.E("cache.GetValidOrCreate", errors.K.Invalid, "reason", "invalid construction mode", "mode", c.Mode)
}

func (c *TypedCache[K, V]) getOrCreateBlocking(
	key K,
	constructor func() (V, error),
	evict func(val V) bool) (val V, evicted bool, err error) {

	c.lock.Lock()
	defer c.lock.Unlock()

	var ok bool
	val, ok = c.getOrEvict(key, false, evict, nil)
	if ok {
		return val, false, nil
	}

	// create the value - holding the write lock (and blocking any other call...)
	val, err = constructor()
	if err != nil {
		c.metrics.Error()
		var zero V
		return zero, false, err
	}
	c.metrics.Add()
	evicted = c.lru.Add(key, val)
	return val, evicted, err
}

func (c *TypedCache[K, V]) getOrCreateDecoupled(
	key K,
	constructor func() (V, error),
	evict func(val V) bool) (val V, evicted bool, err error) {

	// try to get the value with regular rw lock
	var ok bool
	val, ok = c.getOrEvict(key, true, evict, nil)
	if ok {
		return val, false, nil
	}

	// get the creation mutex for this key
	keyMutex := c.namedLocks.Lock(key)
	defer keyMutex.Unlock()

	// try getting the value again - it might have been created in the meantime
	val, ok = c.getOrEvict(key, true, evict, func() {
		// decrement the metrics' Misses count - independent of the new result: if
		// we still have a miss, we counted them twice. If we get a hit now, the
		// previous miss was incorrect.
		c.metrics.UnMiss()
	})

	if ok {
		return val, false, nil
	}

	// create the value
	val, err = constructor()
	if err != nil {
		c.metrics.Error()
		var zero V
		return zero, false, err
	}

	// add it to the cache (using the regular rw lock)
	evicted = c.Add(key, val)
	return val, evicted, nil
}

func (c *TypedCache[K, V]) getOrCreateConcurrent(
	key K,
	constructor func() (V, error),
	evict func(val V) bool) (val V, evicted bool, err error) {

	// try to get the value with regular rw lock
	var ok bool
	val, ok = c.getOrEvict(key, true, evict, nil)
	if ok {
		return val, false, nil
	}

	// create the value - holding no lock at all
	val, err = constructor()
	if err != nil {
		c.lock.Lock()
		c.metrics.Error()
		c.lock.Unlock()
		var zero V
		return zero, false, err
	}

	// add it to the cache
	evicted = c.Add(key, val)
	return val, evicted, err
}

// Contains checks if a key is in the cache, without updating the recent-ness
// or deleting it for being stale.
func (c *TypedCache[K, V]) Contains(key K) bool {
	if c == nil {
		return false
	}
	c.lock.RLock()
	defer c.lock.RUnlock()
	return c.lru.Contains(key)
}

// Peek returns value associated with the given key (or nil if not found) without updating
// the "recently used"-ness of the key.
func (c *TypedCache[K, V]) Peek(key K) (V, bool) {
	if c == nil {
		var zero V
		return zero, false
	}
	c.lock.RLock()
	defer c.lock.RUnlock()
	return c.peek(key)
}

func (c *TypedCache[K, V]) peek(key K) (V, bool) {
	val, ok := c.lru.Peek(key)
	if !ok {
		var zero V
		return zero, ok
	}
	return val.(V), ok
}

// ContainsOrAdd checks if a key is in the cache without updating the
// recent-ness or deleting it for being stale, and if not, adds the value.
// Returns whether found and whether an eviction occurred.
func (c *TypedCache[K, V]) ContainsOrAdd(key K, value V) (ok, evict bool) {
	if c == nil {
		return false, false
	}
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.lru.Contains(key) {
		return true, false
	} else {
		c.metrics.Add()
		evict = c.lru.Add(key, value)
		return false, evict
	}
}

// Remove removes the provided key from the cache.
func (c *TypedCache[K, V]) Remove(key K) {
	if c == nil {
		return
	}
	c.lock.Lock()
	defer c.lock.Unlock()
	// no need to update metrics: lru.Remove calls onEvicted()
	c.lru.Remove(key)
}

// RemoveOldest removes the oldest item from the cache.
func (c *TypedCache[K, V]) RemoveOldest() {
	if c == nil {
		return
	}
	c.lock.Lock()
	defer c.lock.Unlock()
	// no need to update metrics: lru.RemoveOldest calls onEvicted()
	c.lru.RemoveOldest()
}

// Keys returns a slice of the keys in the cache, from oldest to newest.
func (c *TypedCache[K, V]) Keys() (keys []K) {
	if c == nil {
		return make([]K, 0)
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	return c.keys()
}

func (c *TypedCache[K, V]) keys() (keys []K) {
	ikeys := c.lru.Keys()
	keys = make([]K, 0, len(ikeys))
	for _, k := range ikeys {
		keys = append(keys, k.(K))
	}
	return keys
}

// Len returns the number of items in the cache.
func (c *TypedCache[K, V]) Len() int {
	if c == nil {
		return 0
	}
	c.lock.RLock()
	defer c.lock.RUnlock()
	return c.lru.Len()
}

// Metrics returns a copy of the cache's runtime properties.
func (c *TypedCache[K, V]) Metrics() Metrics {
	if c == nil {
		return MakeMetrics()
	}
	return c.metrics.Copy()
}

// CollectMetrics returns a copy of the cache's runtime properties.
func (c *TypedCache[K, V]) CollectMetrics() jsonutil.GenericMarshaler {
	m := c.Metrics()
	return &m
}

// onEvict is the evict handler registered with the simple LRU and is used to
// update the item count. Relays to the external evict handler if present.
func (c *TypedCache[K, V]) onEvict(key interface{}, value interface{}) {
	c.metrics.Remove()
	if c.evictHandler != nil {
		c.evictHandler(key.(K), value.(V))
	}
}

// getOrEvict gets the value for the given key using the regular write lock if
// requested. It handles a possible eviction with the optional evict function,
// but doesn't call the registered onEvict handler (for backwards
// compatibility). It also updates all necessary metrics accordingly.
// optFn is an optional function that gets called (within the write lock if
// requested).
func (c *TypedCache[K, V]) getOrEvict(
	key K,
	lock bool,
	evict func(val V) bool,
	optFn func()) (V, bool) {

	var zero V
	if c == nil {
		return zero, false
	}

	if lock {
		// need the write lock, since this updates the recently-used list in
		// simple.LRU!
		c.lock.Lock()
		defer c.lock.Unlock()
	}

	if optFn != nil {
		defer optFn()
	}

	val, ok := c.get(key)
	if ok {
		if evict == nil || !evict(val) {
			c.metrics.Hit()
			return val, true
		}
		// item got evicted by custom optional evict function
		c.lru.Remove(key)
		c.metrics.Remove()
	}
	c.metrics.Miss()

	return zero, false
}

// runWithWriteLock runs the given function within the write mutex of the cache.
// Allows other cache types in the package to use the cache's main mutex.
func (c *TypedCache[K, V]) runWithWriteLock(fn func()) {
	if c == nil {
		return
	}

	c.lock.Lock()
	defer c.lock.Unlock()

	fn()
}
